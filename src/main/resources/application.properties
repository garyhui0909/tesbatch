spring.datasource.jdbc-url=jdbc:mysql://127.0.0.1:3306/test_batch1
spring.datasource.username=root
spring.datasource.password=123456
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.separator=//

#spring.seconddatasource.jdbc-url=jdbc:mysql://127.0.0.1:3306/test_batch2
spring.seconddatasource.jdbc-url=jdbc:mysql://127.0.0.1:3306/test_batch2?rewriteBatchedStatements=true&cachePrepStmts=true&useServerPrepStmts=true
spring.seconddatasource.username=root
spring.seconddatasource.password=123456
#spring.seconddatasource.type=com.alibaba.druid.pool.DruidDataSource
spring.seconddatasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.seconddatasource.separator=//
#spring.seconddatasource.hikari.data-source-properties.useServerPrepStmts=true
#spring.seconddatasource.hikari.data-source-properties.rewriteBatchedStatements=true

# Logging
#logging.level.root=DEBUG
#logging.level.org.springframework=TRACE
#logging.file.name=app-log-file.log
#logging.file.path=C:/Gary_backup/Study/BulkInsertToOtherDB/workspace/tesbatch/logs

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.springframework.transaction=TRACE
#logging.level.org.hibernate.type.descriptor.sql=TRACE
#logging.level.org.hibernate.type=TRACE
#logging.file=C:/Gary_backup/Study/BulkInsertToOtherDB/workspace/tesbatch/logs/app.log

## Jpa
#spring.jpa.database=default
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.show-sql=false
spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto = update
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.jdbc.batch_size=1000
spring.jpa.properties.hibernate.order_inserts=true

# A list of all Hikari parameters with a good explanation is available on https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
# This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool. Default: same as maximumPoolSize
spring.datasource.hikari.minimumIdle=10
# This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend.
# Default: 10
spring.datasource.hikari.maximumPoolSize=100
#This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
#Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)
spring.datasource.hikari.connectionTimeout=600000
# This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. This setting only applies when minimumIdle is defined to be less than maximumPoolSize
# Default: 600000 (10 minutes)
spring.datasource.hikari.idleTimeout=600000
# This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed will it then be removed.
# Default: 1800000 (30 minutes)
spring.datasource.hikari.maxLifetime=1800000


# Default port
server.port = 8081

# Debug mode
#logging.level.root = debug